name: Build and Deploy
on:
  pull_request:
    branches:
      - develop
      # - release
      # - master

env:
  BUILD_CONFIG: 'Release'
  # DOTNET_ROOT: '/home/runner/.dotnet'

permissions:
  contents: read
  pages: write
  id-token: write
  
jobs:
  build:
    runs-on: runner1

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET Core SDK
      uses: actions/setup-dotnet@v2
      with: 
        dotnet-version: '8.0'
        
    # - name: Install Entity Framework CLI
    #   run: |
    #       dotnet tool install --global dotnet-ef
    #       export PATH="$PATH:/home/runner/.dotnet/tools"        
                  
    - name: Restore NuGet packages
      run: dotnet restore 
      
    # - name: Restore NuGet packages
    #   run: dotnet restore AirPassengerProtection.Integration.sln
      
    - name: Build .NET Projects
      run: dotnet build ./AirPassengerProtection.Integration.sln --configuration $BUILD_CONFIG --no-restore
 
    # - name: Run .NET Tests
    #   run: dotnet test **/Tests.csproj --configuration $BUILD_CONFIG

    - name: Publish Functions
      run: |
          dotnet publish AzAiIntegration.Functions/AzAiIntegration.Functions.csproj --configuration $BUILD_CONFIG  --no-build --output  ${{ github.workspace }}/functionapp
          
    - name: Zip Functions Artifact
      run: |
          cd ${{ github.workspace }}/functionapp
          zip -r ../myapp.zip .

    # - name: Create EF Core migration script ()
    #   run: |
    #       export PATH="$PATH:/home/runner/.dotnet/tools"
    #       dotnet ef migrations script --project AzAiIntegration.DataAccess --startup-project AzAiIntegration.Functions --context AppxDbContext -i --output ${{github.workspace}}/sql/migration.sql
          
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3.0.0
      with:
        name: SQLDB
        path: ${{ github.workspace }}/myapp.zip

    # - name: Upload Build Artifacts
    #   uses: actions/upload-artifact@v3.0.0
    #   with:
    #     name: SQLDB
    #     path: ${{ github.workspace }}/sql/migration.sql

  deploySqlscriptsonDev:
    runs-on: runner1
    needs: build
    # environment: DEV

    steps:
    # - name: Download Build Artifacts
    #   uses: actions/download-artifact@v3.0.0
    #   with:
    #     name: SQLDB
    #     path: .SQLDB
        
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash         
        
    - uses: azure/login@v1
      with:
       client-id: ${{ secrets.DEV_AZURE_CLIENT_ID }}
       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
       # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
       allow-no-subscriptions: true
        # creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Stop Azure Function App
      run: az functionapp stop --name tesfuncapp00 --resource-group prod-resource-group

    # - name: Fetch Secrets from Azure key Vault
    #   id: keyvault
    #   uses: azure/get-keyvault-secrets@v1
    #   with:
    #     keyvault: ${{ secrets.KEYVAULT_NAME }}
    #     secrets: |
    #       db-connection-string
    
    # - name: Azure SQL deploy-database
    #   uses: azure/sql-action@v2.3
    #   with:
    #     server-name: testserver0002
    #     connection-string: ${{ secrets.sqldbconnection}}
    #      # connection-string: ${{ steps.keyvault.outputs.db-connection-string }}
    #     path: .SQLDB/migration.sql
    #     action: publish
    #     # dacpac-package: ${{ github.workspace }}/myapp/migration.sql
    #     # dacpac-package: migration.sql
    #     # script-file: ${{ github.workspace }}/myapp/migration.sql
    - name: Deploy Functions
      uses: azure/functions-action@v1
      id: fa
      with:
        app-name: tesfuncapp00
        package: .SQLDB/myapp.zip
        # publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}        
        
    - name: start Azure Function App
      run: az functionapp start --name tesfuncapp00 --resource-group prod-resource-group   
