name: Build and Deploy
on:
  push:
    branches:
      - develop
      - release
      - master
    paths:
    - .github/workflows/sqldeploy.yml
env:
  BUILD_CONFIG: 'Release'
  # DOTNET_ROOT: '/home/runner/.dotnet'

permissions:
  contents: read
  pages: write
  id-token: write
  
jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET Core SDK
      uses: actions/setup-dotnet@v2
      with: 
        dotnet-version: '8.0'
        
    - name: Install Entity Framework CLI
      run: |
          dotnet tool install --global dotnet-ef
          export PATH="$PATH:/home/runner/.dotnet/tools"        
                  
    - name: Restore NuGet packages
      run: dotnet restore 
      
    # - name: Restore NuGet packages
    #   run: dotnet restore AirPassengerProtection.Integration.sln
      
    - name: Build .NET Projects
      run: dotnet build ${{ secrets.SOLUTIONFILE }} --configuration $BUILD_CONFIG --no-restore
 

    - name: Publish Functions
      run: |
          dotnet publish ${{ secrets.PUBLISHFUNCTIONS }} --configuration $BUILD_CONFIG  --no-build --output  ${{ github.workspace }}/functionapp
          
    - name: Zip Functions Artifact
      run: |
          cd ${{ github.workspace }}/functionapp
          zip -r ../myapp.zip .

    - name: Create EF Core migration script ()
      run: |
          export PATH="$PATH:/home/runner/.dotnet/tools"
          dotnet ef migrations script --project ${{ secrets.PUBLISHFUNCTIONS }} --startup-project ${{ secrets.STARTUP }} --context ${{ secrets.CONTEXT }} -i --output ${{github.workspace}}/sql/migration.sql
          
    # - name: Upload Build Artifacts
    #   uses: actions/upload-artifact@v4.0.0
    #   with:
    #     name: APPX
    #     path: ${{ github.workspace }}/myapp.zip

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4.0.0
      with:
        name: APPX
        path: ${{ github.workspace }}/sql/migration.sql

  deploySqlscriptsonDev:
    runs-on: ubuntu-latest
    needs: build
    # environment: DEV

    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4.0.0
      with:
        name: APPX
        path: .APPX
        
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash         
        
    - uses: azure/login@v1
      with:
       client-id: ${{ secrets.DEV_AZURE_CLIENT_ID }}
       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
       # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
       allow-no-subscriptions: true

    # - uses: azure/login@v2
    #   with:
    #     client-id: c179b16a-98a1-43ca-b2e9-d719b66c7fd0 # The Managed Identity with Federated Credential
    #     tenant-id: ${{ secrets.AZURE_TENANT_ID }}
    #     subscription-id: ee902f6d-01a9-4a32-8c5f-af9403e6c766
            
    #     # creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - uses: azure/login@v1
    #   with: 
    #      creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Stop Azure Function App
    #   run: az functionapp stop --name tesfuncapp00 --resource-group tesfuncapp00_group   

    # - name: Fetch Secrets from Azure key Vault
    #   id: keyvault
    #   uses: azure/get-keyvault-secrets@v1
    #   with:
    #     keyvault: ${{ secrets.KEYVAULT_NAME }}
    #     secrets: |
    #       db-connection-string
    
    - name: Azure SQL deploy-database
      uses: azure/sql-action@v2.3
      with:
        # server-name: testserver0002
        connection-string: Server=tcp:testdbserver901.database.windows.net,1433;Initial Catalog=testdb;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication="Active Directory Default";
         # connection-string: ${{ steps.keyvault.outputs.db-connection-string }}
        path: .APPX/migration.sql
        action: publish
        skip-firewall-check: true
        # dacpac-package: ${{ github.workspace }}/myapp/migration.sql
        # dacpac-package: migration.sql
        # script-file: ${{ github.workspace }}/myapp/migration.sql

    # - name: Deploy Functions
    #   uses: azure/functions-action@v1
    #   id: fa
    #   with:
    #     app-name: testfnc
    #     package: .APPX/myapp.zip
    #     # publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}        
        
    # - name: start Azure Function App
    #   run: az functionapp start --name testfnc --resource-group testproject   

  # deploySqlscriptsonUat:
  #   runs-on: runner2
  #   needs: build
  #   # environment: DEV

  #   steps:
  #   - name: Download Build Artifacts
  #     uses: actions/download-artifact@v3.0.0
  #     with:
  #       name: APPX
  #       path: .APPX
        
  #   - name: Install Azure CLI
  #     run: |
  #       curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash         
        
  #   - uses: azure/login@v1
  #     with:
  #      client-id: ${{ secrets.DEV_AZURE_CLIENT_ID }}
  #      tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #      # subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #      allow-no-subscriptions: true
  #       # creds: ${{ secrets.AZURE_CREDENTIALS }}
